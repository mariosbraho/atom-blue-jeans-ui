// Lists
// -------------------
// Used in different places, like the Tree View, Commmand Palette etc.
// Overrides: atom/static/lists.less
// List Group -------------------
.theme-atom-blue-jeans-ui {
    .list-group {
        li {
            padding-left: @component-padding/2;
            // We want to highlight the background of the list items because we dont know their size.
            &.selected {
                color: @text-color-selected;
                background-color: @background-color-selected;

                &:before {
                    display: none;
                }
            }
        }
    }
    // List Tree -------------------
    .list-tree {
        .selected {
            color: @text-color-selected;
        }
    }

    .list-group,
    .list-tree {
        li:not(.list-nested-item),
        li.list-nested-item > .list-item {
            .text(normal);
        }

        .generate-list-item-text-color(@class) {
            li:not(.list-nested-item).text-@{class},
            li.list-nested-item.text-@{class} > .list-item {
                .text(@class);
            }
        }
        .generate-list-item-text-color(subtle);
        .generate-list-item-text-color(info);
        .generate-list-item-text-color(success);
        .generate-list-item-text-color(warning);
        .generate-list-item-text-color(error);
        .generate-list-item-text-color(selected);

        .generate-list-item-status-color(@color, @status) {
            li:not(.list-nested-item).status-@{status},
            li.list-nested-item.status-@{status} > .list-item {
                color: @color;
            }

            li:not(.list-nested-item).selected.status-@{status},
            li.list-nested-item.selected.status-@{status} > .list-item {
                color: @color;
            }
        }

        .generate-list-item-status-color(@text-color-added, added);
        .generate-list-item-status-color(@text-color-ignored, ignored);
        .generate-list-item-status-color(@text-color-modified, modified);
        .generate-list-item-status-color(@text-color-removed, removed);
        .generate-list-item-status-color(@text-color-renamed, renamed);

        li:not(.list-nested-item).selected,
        li.list-nested-item.selected > .list-item {
            .text(selected);
        }
    }

    // Select List -------------------
    .select-list {
        li {
            padding: @component-padding/2 @component-padding;
        }

        .status {
            float: right;
        }
    }
    // Popover List -------------------
    // Used as a popover for something like autocomplete.

    .select-list.popover-list {
        @popover-list-padding: @component-padding/2;
        padding: @popover-list-padding;
        border-radius: @component-border-radius;
        background-color: @overlay-background-color;
        box-shadow: 0 2px 8px 1px hsla(0,0%,0%,.3);

        .list-group {
            margin-top: @popover-list-padding;

            li {
                padding-left: @popover-list-padding;
            }
        }
    }
}
